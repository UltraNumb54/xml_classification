import os
from ultralytics import YOLO
import cv2

# 1. Загрузка обученной модели
model_path = os.path.join('yolo_obb_train', 'exp1', 'weights', 'best.pt')
trained_model = YOLO(model_path)

# 2. Загрузка классов (если нужно отображать имена классов)
dataset_path = "ваш/путь/к/датасету"  # Укажите путь к датасету
with open(os.path.join(dataset_path, "classes.txt"), "r") as f:
    classes = [line.strip() for line in f.readlines()]

# 3. Предсказание на новом изображении
image_path = 'ваше/изображение.jpg'  # Путь к тестовому изображению

# Выполняем предсказание
results = trained_model.predict(
    source=image_path,
    conf=0.5,
    device='cpu',
    save=True,  # Сохраняем результат с bounding boxes
    save_txt=True,  # Сохраняем аннотации в txt файл
    save_conf=True  # Сохраняем уверенность предсказаний
)

# 4. Обработка и вывод результатов
for i, result in enumerate(results):
    print(f"Результаты для изображения {i+1}:")
    
    # Проверяем, есть ли обнаруженные объекты
    if result.obb is not None and len(result.obb) > 0:
        print("Обнаруженные объекты:")
        for j, box in enumerate(result.obb):
            cls_id = int(box.cls)
            confidence = box.conf.item()
            class_name = classes[cls_id] if classes and cls_id < len(classes) else f"Class {cls_id}"
            
            # Получаем координаты bounding box (OBB формат)
            coords = box.xyxyxyxy.numpy() if hasattr(box, 'xyxyxyxy') else box.xywhxywh.numpy()
            
            print(f"- {class_name} (уверенность: {confidence:.2f})")
            print(f"  Координаты: {coords}")
    else:
        print("Объекты не обнаружены.")
    
    # Визуализируем результат
    result_img = result.plot()  # Создаем изображение с bounding boxes
    cv2.imshow('Результат', result_img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    # Сохраняем результат
    output_path = f'результат_{i}.jpg'
    cv2.imwrite(output_path, result_img)
    print(f"Результат сохранен как: {output_path}")