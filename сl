import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import os

# Конфигурация
IMG_SIZE = (150, 150)
BATCH_SIZE = 32
EPOCHS = 10
DATA_DIR = "data"  # Папка с подпапками классов

# Data Augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

# Генераторы данных
train_generator = train_datagen.flow_from_directory(
    DATA_DIR,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    DATA_DIR,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

# Компактная модель
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(*IMG_SIZE, 3)),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(len(train_generator.class_indices), activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Обучение
history = model.fit(
    train_generator,
    epochs=EPOCHS,
    validation_data=val_generator,
    verbose=1
)

# Сохранение модели
model.save('model/image_classifier.keras')
np.save('model/class_indices.npy', train_generator.class_indices)

import tensorflow as tf
from tensorflow.keras.preprocessing import image
import numpy as np
import os

# Загрузка модели
model = tf.keras.models.load_model('model/image_classifier.keras')
class_indices = np.load('model/class_indices.npy', allow_pickle=True).item()

def predict_image(img_path):
    img = image.load_img(img_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    
    predictions = model.predict(img_array)
    predicted_class = list(class_indices.keys())[np.argmax(predictions)]
    
    return predicted_class, np.max(predictions)

# Пример использования
if __name__ == "__main__":
    result = predict_image("test_image.jpg")
    print(f"Class: {result[0]}, Confidence: {result[1]:.2f}")