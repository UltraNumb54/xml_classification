import os
import shutil
from lxml import etree
from tqdm import tqdm
from collections import defaultdict


def filter_and_organize_files(xml_path, data_folder, target_base_folder, service_mapping, extensions_to_keep):
    """
    Основная функция для фильтрации и организации файлов
    """
    try:
        # Создаем обратное отображение английских названий на русские
        reverse_service_mapping = {v: k for k, v in service_mapping.items()}

        # Парсим XML файл
        parser = etree.XMLParser(recover=True)  # Включаем режим восстановления для обработки ошибок
        tree = etree.parse(xml_path, parser)
        root = tree.getroot()

        # Создаем структуры для хранения данных
        services_data = defaultdict(list)
        files_to_keep = set()
        files_to_move = []

        # Проходим по всем record в XML
        for record in tqdm(root.findall('record'), desc="Обработка записей"):
            # Извлекаем данные из record
            service_elem = record.find('service')
            if service_elem is None or service_elem.text is None:
                continue

            service = service_elem.text.strip()

            # Проверяем, есть ли сервис в обратном отображении
            if service not in reverse_service_mapping:
                # Если нет, проверяем, может быть это русское название
                if service not in service_mapping:
                    continue
                else:
                    # Это русское название, используем как есть
                    target_service = service
            else:
                # Это английское название, получаем русский эквивалент
                target_service = reverse_service_mapping[service]

            # Обрабатываем вложения
            attachments_elems = record.findall('attachments')
            filtered_attachments = []

            for att_elem in attachments_elems:
                if att_elem.text is None:
                    continue

                filename = att_elem.text.strip()
                if not filename:
                    continue

                # Проверяем расширение файла
                ext = os.path.splitext(filename)[1].lower()
                if ext in extensions_to_keep:
                    # Проверяем существование файла
                    file_path = os.path.join(data_folder, filename)
                    if os.path.exists(file_path):
                        filtered_attachments.append(filename)
                        files_to_keep.add(filename)
                        files_to_move.append((filename, target_service))
                    else:
                        # Удаляем элемент attachment если файл не существует
                        record.remove(att_elem)
                else:
                    # Удаляем элемент attachment если расширение не подходит
                    record.remove(att_elem)

            # Если есть подходящие вложения, добавляем запись в данные
            if filtered_attachments:
                services_data[target_service].append(record)

        # Удаляем файлы с неподходящими расширениями
        print("Удаление ненужных файлов...")
        all_files = set(os.listdir(data_folder))
        files_to_delete = all_files - files_to_keep

        for filename in tqdm(files_to_delete, desc="Удаление файлов"):
            file_path = os.path.join(data_folder, filename)
            try:
                if os.path.isfile(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"Ошибка при удалении файла {filename}: {e}")

        # Создаем папки сервисов и перемещаем файлы
        print("Организация файлов по папкам...")
        for filename, service in tqdm(files_to_move, desc="Перемещение файлов"):
            # Получаем английское название папки из словаря
            eng_folder = service_mapping[service]
            safe_folder_name = "".join(c for c in eng_folder if c.isalnum() or c in (' ', '-', '_')).rstrip()
            service_folder = os.path.join(target_base_folder, safe_folder_name)

            if not os.path.exists(service_folder):
                os.makedirs(service_folder)

            # Перемещаем файл
            src_path = os.path.join(data_folder, filename)
            dst_path = os.path.join(service_folder, filename)

            try:
                if os.path.exists(src_path):
                    shutil.move(src_path, dst_path)
            except Exception as e:
                print(f"Ошибка при перемещении файла {filename}: {e}")

        # Создаем новый XML файл только с нужными записями
        print("Создание нового XML файла...")
        new_root = etree.Element('data')
        for service, records in services_data.items():
            for record in records:
                new_root.append(record)

        new_tree = etree.ElementTree(new_root)
        new_xml_path = os.path.join(target_base_folder, "filtered_data.xml")
        new_tree.write(new_xml_path, encoding='utf-8', xml_declaration=True, pretty_print=True)

        print(f"\nОбработка завершена!")
        print(f"Сохранено записей: {sum(len(records) for records in services_data.values())}")
        print(f"Сохранено файлов: {len(files_to_keep)}")
        print(f"Удалено файлов: {len(files_to_delete)}")

        return {
            'saved_records': sum(len(records) for records in services_data.values()),
            'saved_files': len(files_to_keep),
            'deleted_files': len(files_to_delete)
        }

    except Exception as e:
        print(f"Критическая ошибка: {e}")
        import traceback
        traceback.print_exc()
        return None


# Функция для проверки структуры XML файла
def check_xml_structure(xml_path):
    """
    Проверяет структуру XML файла и выводит информацию о нем
    """
    print("Проверка структуры XML файла...")

    try:
        parser = etree.XMLParser(recover=True)
        tree = etree.parse(xml_path, parser)
        root = tree.getroot()

        records = root.findall('record')
        print(f"Найдено записей: {len(records)}")

        if records:
            first_record = records[0]
            print("Пример структуры первой записи:")
            for child in first_record:
                print(f"  <{child.tag}>: {child.text}")

    except Exception as e:
        print(f"Ошибка при проверке структуры файла: {e}")


# Использование
if __name__ == "__main__":
    xml_path = 'C:/Users/user/PycharmProjects/classif/test.xml'
    data_folder = 'C:/Users/user/PycharmProjects/classif/photo'
    target_base_folder = 'C:/Users/user/PycharmProjects/classif'

    # Словарь сопоставления русских названий сервисов с английскими названиями папок
    service_mapping = {
        'Техническая поддержка': 'Technical_Support',
        'Бухгалтерия': 'Accounting',
        'Юридический отдел': 'Legal_Department',
        'Отдел кадров': 'HR_Department',
        'ИТ отдел': 'IT_Department'
    }

    # Список расширений, которые нужно сохранить (в нижнем регистре)
    extensions_to_keep = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png', '.txt']

    # Сначала проверяем структуру XML файла
    check_xml_structure(xml_path)

    # Запуск основной функции
    stats = filter_and_organize_files(xml_path, data_folder, target_base_folder, service_mapping, extensions_to_keep)

    if stats:
        print(f"\nРезультаты обработки:")
        print(f"- Сохранено записей: {stats['saved_records']}")
        print(f"- Сохранено файлов: {stats['saved_files']}")
        print(f"- Удалено файлов: {stats['deleted_files']}")
    else:
        print("Обработка завершилась с ошибкой.")
